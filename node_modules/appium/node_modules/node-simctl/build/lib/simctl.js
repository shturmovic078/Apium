'use strict';

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _asyncbox = require('asyncbox');

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var _es6Mapify = require('es6-mapify');

var log = global._global_npmlog || _npmlog2['default'];

function simExec(cmd, timeout) {
  var args = arguments[2] === undefined ? [] : arguments[2];

  args = args.map(function (arg) {
    if (arg.indexOf(' ') !== -1) {
      return '"' + arg + '"';
    }
    return arg;
  });
  cmd = 'xcrun simctl ' + cmd + ' ' + args.join(' ');
  log.info('Executing: ' + cmd + ' with timeout ' + timeout);
  return _q2['default'].nfcall(_child_process2['default'].exec, cmd, { timeout: timeout });
}

function installApp(udid, appPath) {
  return _regeneratorRuntime.async(function installApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('install', 0, [udid, appPath]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function removeApp(udid, bundleId) {
  return _regeneratorRuntime.async(function removeApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('uninstall', 0, [udid, bundleId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function launch(udid, bundleId) {
  return _regeneratorRuntime.async(function launch$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('launch', 0, [udid, bundleId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function createDevice(name, deviceTypeId, runtimeId) {
  return _regeneratorRuntime.async(function createDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('create', 0, [name, deviceTypeId, runtimeId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function deleteDevice(udid) {
  return _regeneratorRuntime.async(function deleteDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('delete', 0, [udid]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function eraseDevice(udid) {
  var cmdTimeout, cmdRetry, loopFn;
  return _regeneratorRuntime.async(function eraseDevice$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        cmdTimeout = 2000, cmdRetry = 5;

        loopFn = function loopFn() {
          var ms;
          return _regeneratorRuntime.async(function loopFn$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                ms = Date.now();
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(simExec('erase', cmdTimeout, [udid]));

              case 4:
                context$2$0.next = 11;
                break;

              case 6:
                context$2$0.prev = 6;
                context$2$0.t0 = context$2$0['catch'](1);
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(Math.max(cmdTimeout - (Date.now() - ms), 1)));

              case 10:
                throw context$2$0.t0;

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[1, 6]]);
        };

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.retry)(cmdRetry, loopFn));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDevices() {
  var forSdk = arguments[0] === undefined ? null : arguments[0];

  var res, stdout, deviceSecRe, matches, devices, match, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, sdk, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line, lineRe, lineMatch, device;

  return _regeneratorRuntime.async(function getDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('list', 0, ['devices']));

      case 2:
        res = context$1$0.sent;
        stdout = res[0];
        deviceSecRe = /-- iOS (.+) --(\n    .+)*/mg;
        matches = [];
        devices = {};
        match = deviceSecRe.exec(stdout);

        while (match !== null) {
          matches.push(match);
          match = deviceSecRe.exec(stdout);
        }

        if (!(matches.length < 1)) {
          context$1$0.next = 11;
          break;
        }

        throw new Error('Could not find device section');

      case 11:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 14;
        _iterator = _getIterator(matches);

      case 16:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 56;
          break;
        }

        match = _step.value;
        sdk = match[1];

        devices[sdk] = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 23;
        _iterator2 = _getIterator(match[0].split('\n').slice(1));

      case 25:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 39;
          break;
        }

        line = _step2.value;
        lineRe = /^    ([^\(]+) \(([^\)]+)\) \(([^\)]+)\)/;
        lineMatch = lineRe.exec(line);

        if (!(lineMatch === null)) {
          context$1$0.next = 31;
          break;
        }

        throw new Error('Couldn\'t match line');

      case 31:
        device = {};

        device.name = lineMatch[1];
        device.udid = lineMatch[2];
        device.state = lineMatch[3];
        devices[sdk].push(device);

      case 36:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 25;
        break;

      case 39:
        context$1$0.next = 45;
        break;

      case 41:
        context$1$0.prev = 41;
        context$1$0.t0 = context$1$0['catch'](23);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 45:
        context$1$0.prev = 45;
        context$1$0.prev = 46;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 48:
        context$1$0.prev = 48;

        if (!_didIteratorError2) {
          context$1$0.next = 51;
          break;
        }

        throw _iteratorError2;

      case 51:
        return context$1$0.finish(48);

      case 52:
        return context$1$0.finish(45);

      case 53:
        _iteratorNormalCompletion = true;
        context$1$0.next = 16;
        break;

      case 56:
        context$1$0.next = 62;
        break;

      case 58:
        context$1$0.prev = 58;
        context$1$0.t1 = context$1$0['catch'](14);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 62:
        context$1$0.prev = 62;
        context$1$0.prev = 63;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 65:
        context$1$0.prev = 65;

        if (!_didIteratorError) {
          context$1$0.next = 68;
          break;
        }

        throw _iteratorError;

      case 68:
        return context$1$0.finish(65);

      case 69:
        return context$1$0.finish(62);

      case 70:
        if (!forSdk) {
          context$1$0.next = 74;
          break;
        }

        if (devices[forSdk]) {
          context$1$0.next = 73;
          break;
        }

        throw new Error('Sdk ' + forSdk + ' was not in list of simctl sdks');

      case 73:
        return context$1$0.abrupt('return', devices[forSdk]);

      case 74:
        return context$1$0.abrupt('return', devices);

      case 75:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[14, 58, 62, 70], [23, 41, 45, 53], [46,, 48, 52], [63,, 65, 69]]);
}

exports.installApp = installApp;
exports.removeApp = removeApp;
exports.launch = launch;
exports.createDevice = createDevice;
exports.deleteDevice = deleteDevice;
exports.eraseDevice = eraseDevice;
exports.getDevices = getDevices;

// retry erase with a sleep in between because it's flakey
//# sourceMappingURL=data:application/json;base64,