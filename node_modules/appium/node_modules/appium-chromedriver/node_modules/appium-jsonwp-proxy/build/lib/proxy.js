'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _testMockRequest = require('../test/mock-request');

var _appiumLogger = require('appium-logger');

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _jsonwpStatus = require('jsonwp-status');

var _jsonwpStatus2 = _interopRequireDefault(_jsonwpStatus);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var log = (0, _appiumLogger.getLogger)('JSONWP Proxy');

function truncate(json) {
  var chars = arguments.length <= 1 || arguments[1] === undefined ? 200 : arguments[1];

  json = json || '';
  if (typeof json !== 'string') {
    json = JSON.stringify(json);
  }
  var ext = json.length > chars ? '...' : '';
  return json.slice(0, chars) + ext;
}

function safeJson(body) {
  try {
    body = JSON.parse(body);
  } catch (e) {}
  return body;
}

var JWProxy = (function () {
  function JWProxy() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JWProxy);

    _Object$assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      mockRequest: false
    }, opts);
    this.scheme = this.scheme.toLowerCase();
  }

  _createClass(JWProxy, [{
    key: 'request',
    value: function request() {
      if (this.mockRequest) {
        return _testMockRequest.request.apply(undefined, arguments);
      } else {
        return _request2['default'].apply(undefined, arguments);
      }
    }
  }, {
    key: 'endpointRequiresSessionId',
    value: function endpointRequiresSessionId(endpoint) {
      return !_lodash2['default'].contains(['/session', '/sessions', '/status'], endpoint);
    }
  }, {
    key: 'getUrlForProxy',
    value: function getUrlForProxy(url) {
      if (url === '') url = '/';
      var proxyBase = this.scheme + '://' + this.server + ':' + this.port + this.base;
      var endpointRe = '(/(session|status))';
      var remainingUrl = '';
      if (/^http/.test(url)) {
        var first = new RegExp('(https?://.+)' + endpointRe).exec(url);
        if (!first) {
          throw new Error('Got a complete url but could not extract JWP endpoint');
        }
        remainingUrl = url.replace(first[1], '');
      } else if (new RegExp('^/').test(url)) {
        remainingUrl = url;
      } else {
        throw new Error('Didn\'t know what to do with url \'' + url + '\'');
      }

      var stripPrefixRe = new RegExp('^.+(/(session|status).*)$');
      if (stripPrefixRe.test(remainingUrl)) {
        remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
      }

      if (!new RegExp(endpointRe).test(remainingUrl)) {
        remainingUrl = '/session/' + this.sessionId + remainingUrl;
      }

      var requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

      if (requiresSessionId && this.sessionId === null) {
        throw new Error('Trying to proxy a session command without session id');
      }

      var sessionBaseRe = new RegExp('^/session/([^/]+)');
      if (sessionBaseRe.test(remainingUrl)) {
        // we have something like /session/:id/foobar, so we need to replace
        // the session id
        var match = sessionBaseRe.exec(remainingUrl);
        remainingUrl = remainingUrl.replace(match[1], this.sessionId);
      } else if (requiresSessionId) {
        throw new Error('Could not find :session section for url: ' + remainingUrl);
      }
      remainingUrl = remainingUrl.replace(/\/$/, ''); // can't have trailing slashes
      return proxyBase + remainingUrl;
    }
  }, {
    key: 'proxy',
    value: function proxy(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var newUrl, reqOpts, res, resBody, _ref, _ref2;

      return _regeneratorRuntime.async(function proxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            method = method.toUpperCase();
            newUrl = this.getUrlForProxy(url);
            reqOpts = {
              url: this.getUrlForProxy(url),
              method: method,
              headers: { 'Content-type': 'application/json;charset=UTF=8' }
            };

            if (body !== null) {
              if (typeof body !== 'object') {
                body = JSON.parse(body);
              }
              reqOpts.json = body;
            }
            log.info('Proxying [' + method + ' ' + (url || '/') + '] to [' + method + ' ' + newUrl + ']' + (body ? ' with body: ' + truncate(body) : ' with no body'));
            res = undefined, resBody = undefined;
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_q2['default'].ninvoke(this, 'request', reqOpts));

          case 9:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            res = _ref2[0];
            resBody = _ref2[1];

            log.info('Got response with status ' + res.statusCode + ': ' + truncate(resBody));
            if (/\/session$/.test(url) && method === 'POST') {
              if (res.statusCode === 200) {
                this.sessionId = resBody.sessionId;
              } else if (res.statusCode === 303) {
                this.sessionId = /\/session\/([^\/]+)/.exec(resBody)[1];
              }
            }
            context$2$0.next = 20;
            break;

          case 17:
            context$2$0.prev = 17;
            context$2$0.t0 = context$2$0['catch'](6);
            throw new Error('Could not proxy command to remote server. ' + ('Original error: ' + context$2$0.t0.message));

          case 20:
            return context$2$0.abrupt('return', [res, resBody]);

          case 21:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 17]]);
    }
  }, {
    key: 'command',
    value: function command(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var _ref3, _ref32, response, resBody, statusCodesWithRes, message, e;

      return _regeneratorRuntime.async(function command$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxy(url, method, body));

          case 2:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            response = _ref32[0];
            resBody = _ref32[1];
            statusCodesWithRes = [100, 200, 500];

            resBody = safeJson(resBody);

            if (!(_lodash2['default'].contains(statusCodesWithRes, response.statusCode) && (_lodash2['default'].isUndefined(resBody.status) || _lodash2['default'].isUndefined(resBody.value)))) {
              context$2$0.next = 10;
              break;
            }

            throw new Error('Did not get a valid response object. Object was: ' + JSON.stringify(resBody));

          case 10:
            if (!_lodash2['default'].contains(statusCodesWithRes, response.statusCode)) {
              context$2$0.next = 24;
              break;
            }

            if (!(response.statusCode === 200 && resBody.status === 0)) {
              context$2$0.next = 15;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 15:
            if (!(response.statusCode === 200 && _lodash2['default'].isUndefined(resBody.status))) {
              context$2$0.next = 17;
              break;
            }

            return context$2$0.abrupt('return', resBody);

          case 17:
            message = _jsonwpStatus2['default'].getSummaryByCode(resBody.status);

            if (resBody.value.message) {
              message += ' (Original error: ' + resBody.value.message + ')';
            }
            e = new Error(message);

            e.status = resBody.status;
            e.value = resBody.value;
            e.httpCode = response.statusCode;
            throw e;

          case 24:
            throw new Error('Didn\'t know what to do with response code ' + response.statusCode);

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSessionIdFromUrl',
    value: function getSessionIdFromUrl(url) {
      var match = url.match(/\/session\/([^\/]+)/);
      return match ? match[1] : null;
    }
  }, {
    key: 'proxyReqRes',
    value: function proxyReqRes(req, res) {
      var _ref4, _ref42, response, body, reqSessionId;

      return _regeneratorRuntime.async(function proxyReqRes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxy(req.originalUrl, req.method, req.body));

          case 2:
            _ref4 = context$2$0.sent;
            _ref42 = _slicedToArray(_ref4, 2);
            response = _ref42[0];
            body = _ref42[1];

            res.headers = response.headers;
            res.set('Content-type', response.headers['content-type']);
            // if the proxied response contains a sessionId that the downstream
            // driver has generated, we don't want to return that to the client.
            // Instead, return the id from the request or from current session
            body = safeJson(body);
            if (body && body.sessionId) {
              reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

              if (reqSessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + reqSessionId);
                body.sessionId = reqSessionId;
              } else if (this.sessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + this.sessionId);
                body.sessionId = this.sessionId;
              }
            }
            res.status(response.statusCode).send(JSON.stringify(body));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return JWProxy;
})();

exports['default'] = JWProxy;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,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WUFBWTs7Ozs7OzZDQVJTLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUM7Ozs7O0FBQXpFLG9CQUFRO0FBQUUsZ0JBQUk7O0FBQ25CLGVBQUcsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztBQUMvQixlQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7Ozs7QUFJMUQsZ0JBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEIsZ0JBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDcEIsMEJBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQzs7QUFDOUQsa0JBQUksWUFBWSxFQUFFO0FBQ2hCLG1CQUFHLENBQUMsSUFBSSwwQkFBd0IsSUFBSSxDQUFDLFNBQVMsY0FBUyxZQUFZLENBQUcsQ0FBQztBQUN2RSxvQkFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7ZUFDL0IsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsbUJBQUcsQ0FBQyxJQUFJLDBCQUF3QixJQUFJLENBQUMsU0FBUyxjQUFTLElBQUksQ0FBQyxTQUFTLENBQUcsQ0FBQztBQUN6RSxvQkFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2VBQ2pDO2FBQ0Y7QUFDRCxlQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQzVEOzs7U0E1SkcsT0FBTzs7O3FCQStKRSxPQUFPIiwiZmlsZSI6ImxpYi9wcm94eS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIG1vY2tSZXF1ZXN0IH0gZnJvbSAnLi4vdGVzdC9tb2NrLXJlcXVlc3QnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnYXBwaXVtLWxvZ2dlcic7XG5pbXBvcnQgcmVhbFJlcXVlc3QgZnJvbSAncmVxdWVzdCc7XG5pbXBvcnQgandwU3RhdHVzIGZyb20gJ2pzb253cC1zdGF0dXMnO1xuaW1wb3J0IFEgZnJvbSAncSc7XG5cbmNvbnN0IGxvZyA9IGdldExvZ2dlcignSlNPTldQIFByb3h5Jyk7XG5cbmZ1bmN0aW9uIHRydW5jYXRlIChqc29uLCBjaGFycyA9IDIwMCkge1xuICBqc29uID0ganNvbiB8fCBcIlwiO1xuICBpZiAodHlwZW9mIGpzb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICBqc29uID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG4gIH1cbiAgY29uc3QgZXh0ID0ganNvbi5sZW5ndGggPiBjaGFycyA/ICcuLi4nIDogJyc7XG4gIHJldHVybiBqc29uLnNsaWNlKDAsIGNoYXJzKSArIGV4dDtcbn1cblxuZnVuY3Rpb24gc2FmZUpzb24gKGJvZHkpIHtcbiAgdHJ5IHtcbiAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIGJvZHk7XG59XG5cbmNsYXNzIEpXUHJveHkge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG4gICAgICBzY2hlbWU6ICdodHRwJyxcbiAgICAgIHNlcnZlcjogJ2xvY2FsaG9zdCcsXG4gICAgICBwb3J0OiA0NDQ0LFxuICAgICAgYmFzZTogJy93ZC9odWInLFxuICAgICAgc2Vzc2lvbklkOiBudWxsLFxuICAgICAgbW9ja1JlcXVlc3Q6IGZhbHNlXG4gICAgfSwgb3B0cyk7XG4gICAgdGhpcy5zY2hlbWUgPSB0aGlzLnNjaGVtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgcmVxdWVzdCAoLi4uYXJncykge1xuICAgIGlmICh0aGlzLm1vY2tSZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gbW9ja1JlcXVlc3QoLi4uYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZWFsUmVxdWVzdCguLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBlbmRwb2ludFJlcXVpcmVzU2Vzc2lvbklkIChlbmRwb2ludCkge1xuICAgIHJldHVybiAhXy5jb250YWlucyhbXCIvc2Vzc2lvblwiLCBcIi9zZXNzaW9uc1wiLCBcIi9zdGF0dXNcIl0sIGVuZHBvaW50KTtcbiAgfVxuXG4gIGdldFVybEZvclByb3h5ICh1cmwpIHtcbiAgICBpZiAodXJsID09PSBcIlwiKSB1cmwgPSBcIi9cIjtcbiAgICBjb25zdCBwcm94eUJhc2UgPSBgJHt0aGlzLnNjaGVtZX06Ly8ke3RoaXMuc2VydmVyfToke3RoaXMucG9ydH0ke3RoaXMuYmFzZX1gO1xuICAgIGNvbnN0IGVuZHBvaW50UmUgPSAnKC8oc2Vzc2lvbnxzdGF0dXMpKSc7XG4gICAgbGV0IHJlbWFpbmluZ1VybCA9IFwiXCI7XG4gICAgaWYgKC9eaHR0cC8udGVzdCh1cmwpKSB7XG4gICAgICBjb25zdCBmaXJzdCA9IChuZXcgUmVnRXhwKCcoaHR0cHM/Oi8vLispJyArIGVuZHBvaW50UmUpKS5leGVjKHVybCk7XG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdvdCBhIGNvbXBsZXRlIHVybCBidXQgY291bGQgbm90IGV4dHJhY3QgSldQIGVuZHBvaW50XCIpO1xuICAgICAgfVxuICAgICAgcmVtYWluaW5nVXJsID0gdXJsLnJlcGxhY2UoZmlyc3RbMV0sICcnKTtcbiAgICB9IGVsc2UgaWYgKChuZXcgUmVnRXhwKCdeLycpKS50ZXN0KHVybCkpIHtcbiAgICAgIHJlbWFpbmluZ1VybCA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGlkbid0IGtub3cgd2hhdCB0byBkbyB3aXRoIHVybCAnXCIgKyB1cmwgKyBcIidcIik7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaXBQcmVmaXhSZSA9IG5ldyBSZWdFeHAoJ14uKygvKHNlc3Npb258c3RhdHVzKS4qKSQnKTtcbiAgICBpZiAoc3RyaXBQcmVmaXhSZS50ZXN0KHJlbWFpbmluZ1VybCkpIHtcbiAgICAgIHJlbWFpbmluZ1VybCA9IHN0cmlwUHJlZml4UmUuZXhlYyhyZW1haW5pbmdVcmwpWzFdO1xuICAgIH1cblxuICAgIGlmICghKG5ldyBSZWdFeHAoZW5kcG9pbnRSZSkpLnRlc3QocmVtYWluaW5nVXJsKSkge1xuICAgICAgcmVtYWluaW5nVXJsID0gYC9zZXNzaW9uLyR7dGhpcy5zZXNzaW9uSWR9JHtyZW1haW5pbmdVcmx9YDtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1aXJlc1Nlc3Npb25JZCA9IHRoaXMuZW5kcG9pbnRSZXF1aXJlc1Nlc3Npb25JZChyZW1haW5pbmdVcmwpO1xuXG4gICAgaWYgKHJlcXVpcmVzU2Vzc2lvbklkICYmIHRoaXMuc2Vzc2lvbklkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcnlpbmcgdG8gcHJveHkgYSBzZXNzaW9uIGNvbW1hbmQgd2l0aG91dCBzZXNzaW9uIGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlc3Npb25CYXNlUmUgPSBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vKFteL10rKScpO1xuICAgIGlmIChzZXNzaW9uQmFzZVJlLnRlc3QocmVtYWluaW5nVXJsKSkge1xuICAgICAgLy8gd2UgaGF2ZSBzb21ldGhpbmcgbGlrZSAvc2Vzc2lvbi86aWQvZm9vYmFyLCBzbyB3ZSBuZWVkIHRvIHJlcGxhY2VcbiAgICAgIC8vIHRoZSBzZXNzaW9uIGlkXG4gICAgICBjb25zdCBtYXRjaCA9IHNlc3Npb25CYXNlUmUuZXhlYyhyZW1haW5pbmdVcmwpO1xuICAgICAgcmVtYWluaW5nVXJsID0gcmVtYWluaW5nVXJsLnJlcGxhY2UobWF0Y2hbMV0sIHRoaXMuc2Vzc2lvbklkKTtcbiAgICB9IGVsc2UgaWYgKHJlcXVpcmVzU2Vzc2lvbklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIDpzZXNzaW9uIHNlY3Rpb24gZm9yIHVybDogJHtyZW1haW5pbmdVcmx9YCk7XG4gICAgfVxuICAgIHJlbWFpbmluZ1VybCA9IHJlbWFpbmluZ1VybC5yZXBsYWNlKC9cXC8kLywgJycpOyAvLyBjYW4ndCBoYXZlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZXR1cm4gcHJveHlCYXNlICsgcmVtYWluaW5nVXJsO1xuICB9XG5cbiAgYXN5bmMgcHJveHkgKHVybCwgbWV0aG9kLCBib2R5ID0gbnVsbCkge1xuICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IG5ld1VybCA9IHRoaXMuZ2V0VXJsRm9yUHJveHkodXJsKTtcbiAgICBjb25zdCByZXFPcHRzID0ge1xuICAgICAgdXJsOiB0aGlzLmdldFVybEZvclByb3h5KHVybCksXG4gICAgICBtZXRob2QsXG4gICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGPTgnfVxuICAgIH07XG4gICAgaWYgKGJvZHkgIT09IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICB9XG4gICAgICByZXFPcHRzLmpzb24gPSBib2R5O1xuICAgIH1cbiAgICBsb2cuaW5mbyhgUHJveHlpbmcgWyR7bWV0aG9kfSAke3VybCB8fCBcIi9cIn1dIHRvIFske21ldGhvZH0gJHtuZXdVcmx9XWAgK1xuICAgICAgICAgICAgIChib2R5ID8gYCB3aXRoIGJvZHk6ICR7dHJ1bmNhdGUoYm9keSl9YCA6ICcgd2l0aCBubyBib2R5JykpO1xuICAgIGxldCByZXMsIHJlc0JvZHk7XG4gICAgdHJ5IHtcbiAgICAgIFtyZXMsIHJlc0JvZHldID0gYXdhaXQgUS5uaW52b2tlKHRoaXMsICdyZXF1ZXN0JywgcmVxT3B0cyk7XG4gICAgICBsb2cuaW5mbyhgR290IHJlc3BvbnNlIHdpdGggc3RhdHVzICR7cmVzLnN0YXR1c0NvZGV9OiAke3RydW5jYXRlKHJlc0JvZHkpfWApO1xuICAgICAgaWYgKC9cXC9zZXNzaW9uJC8udGVzdCh1cmwpICYmIG1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgICB0aGlzLnNlc3Npb25JZCA9IHJlc0JvZHkuc2Vzc2lvbklkO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAzMDMpIHtcbiAgICAgICAgICB0aGlzLnNlc3Npb25JZCA9IC9cXC9zZXNzaW9uXFwvKFteXFwvXSspLy5leGVjKHJlc0JvZHkpWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHByb3h5IGNvbW1hbmQgdG8gcmVtb3RlIHNlcnZlci4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIHJldHVybiBbcmVzLCByZXNCb2R5XTtcbiAgfVxuXG4gIGFzeW5jIGNvbW1hbmQgKHVybCwgbWV0aG9kLCBib2R5ID0gbnVsbCkge1xuICAgIGxldCBbcmVzcG9uc2UsIHJlc0JvZHldID0gYXdhaXQgdGhpcy5wcm94eSh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgbGV0IHN0YXR1c0NvZGVzV2l0aFJlcyA9IFsxMDAsIDIwMCwgNTAwXTtcbiAgICByZXNCb2R5ID0gc2FmZUpzb24ocmVzQm9keSk7XG4gICAgaWYgKF8uY29udGFpbnMoc3RhdHVzQ29kZXNXaXRoUmVzLCByZXNwb25zZS5zdGF0dXNDb2RlKSAmJlxuICAgICAgICAoXy5pc1VuZGVmaW5lZChyZXNCb2R5LnN0YXR1cykgfHwgXy5pc1VuZGVmaW5lZChyZXNCb2R5LnZhbHVlKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpZCBub3QgZ2V0IGEgdmFsaWQgcmVzcG9uc2Ugb2JqZWN0LiBPYmplY3Qgd2FzOiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocmVzQm9keSkpO1xuICAgIH1cbiAgICBpZiAoXy5jb250YWlucyhzdGF0dXNDb2Rlc1dpdGhSZXMsIHJlc3BvbnNlLnN0YXR1c0NvZGUpKSB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwICYmIHJlc0JvZHkuc3RhdHVzID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXNCb2R5LnZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDAgJiYgXy5pc1VuZGVmaW5lZChyZXNCb2R5LnN0YXR1cykpIHtcbiAgICAgICAgcmV0dXJuIHJlc0JvZHk7XG4gICAgICB9XG4gICAgICBsZXQgbWVzc2FnZSA9IGp3cFN0YXR1cy5nZXRTdW1tYXJ5QnlDb2RlKHJlc0JvZHkuc3RhdHVzKTtcbiAgICAgIGlmIChyZXNCb2R5LnZhbHVlLm1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgIChPcmlnaW5hbCBlcnJvcjogJHtyZXNCb2R5LnZhbHVlLm1lc3NhZ2V9KWA7XG4gICAgICB9XG4gICAgICBsZXQgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIGUuc3RhdHVzID0gcmVzQm9keS5zdGF0dXM7XG4gICAgICBlLnZhbHVlID0gcmVzQm9keS52YWx1ZTtcbiAgICAgIGUuaHR0cENvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBEaWRuJ3Qga25vdyB3aGF0IHRvIGRvIHdpdGggcmVzcG9uc2UgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCk7XG4gIH1cblxuICBnZXRTZXNzaW9uSWRGcm9tVXJsICh1cmwpIHtcbiAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvXFwvc2Vzc2lvblxcLyhbXlxcL10rKS8pO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHByb3h5UmVxUmVzIChyZXEsIHJlcykge1xuICAgIGxldCBbcmVzcG9uc2UsIGJvZHldID0gYXdhaXQgdGhpcy5wcm94eShyZXEub3JpZ2luYWxVcmwsIHJlcS5tZXRob2QsIHJlcS5ib2R5KTtcbiAgICByZXMuaGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgcmVzLnNldCgnQ29udGVudC10eXBlJywgcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICAgIC8vIGlmIHRoZSBwcm94aWVkIHJlc3BvbnNlIGNvbnRhaW5zIGEgc2Vzc2lvbklkIHRoYXQgdGhlIGRvd25zdHJlYW1cbiAgICAvLyBkcml2ZXIgaGFzIGdlbmVyYXRlZCwgd2UgZG9uJ3Qgd2FudCB0byByZXR1cm4gdGhhdCB0byB0aGUgY2xpZW50LlxuICAgIC8vIEluc3RlYWQsIHJldHVybiB0aGUgaWQgZnJvbSB0aGUgcmVxdWVzdCBvciBmcm9tIGN1cnJlbnQgc2Vzc2lvblxuICAgIGJvZHkgPSBzYWZlSnNvbihib2R5KTtcbiAgICBpZiAoYm9keSAmJiBib2R5LnNlc3Npb25JZCkge1xuICAgICAgY29uc3QgcmVxU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tVXJsKHJlcS5vcmlnaW5hbFVybCk7XG4gICAgICBpZiAocmVxU2Vzc2lvbklkKSB7XG4gICAgICAgIGxvZy5pbmZvKGBSZXBsYWNpbmcgc2Vzc2lvbklkICR7Ym9keS5zZXNzaW9uSWR9IHdpdGggJHtyZXFTZXNzaW9uSWR9YCk7XG4gICAgICAgIGJvZHkuc2Vzc2lvbklkID0gcmVxU2Vzc2lvbklkO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNlc3Npb25JZCkge1xuICAgICAgICBsb2cuaW5mbyhgUmVwbGFjaW5nIHNlc3Npb25JZCAke2JvZHkuc2Vzc2lvbklkfSB3aXRoICR7dGhpcy5zZXNzaW9uSWR9YCk7XG4gICAgICAgIGJvZHkuc2Vzc2lvbklkID0gdGhpcy5zZXNzaW9uSWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcy5zdGF0dXMocmVzcG9uc2Uuc3RhdHVzQ29kZSkuc2VuZChKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSldQcm94eTtcbiJdfQ==