'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _es6Mapify = require('es6-mapify');

require('source-map-support').install();

function sleep(ms) {
  var nodeSetTimeout;
  return _regeneratorRuntime.async(function sleep$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        nodeSetTimeout = function nodeSetTimeout(ms, cb) {
          return setTimeout(cb, ms);
        };

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_q2['default'].nfcall(nodeSetTimeout, ms));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function retry(times, fn) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var tries, done, res;
  return _regeneratorRuntime.async(function retry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        tries = 0;
        done = false;
        res = null;

      case 3:
        if (!(!done && tries < times)) {
          context$1$0.next = 18;
          break;
        }

        tries++;
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(fn.apply(undefined, args));

      case 8:
        res = context$1$0.sent;

        done = true;
        context$1$0.next = 16;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](5);

        if (!(tries >= times)) {
          context$1$0.next = 16;
          break;
        }

        throw context$1$0.t0;

      case 16:
        context$1$0.next = 3;
        break;

      case 18:
        return context$1$0.abrupt('return', res);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 12]]);
}

function retryInterval(times, sleepMs, fn) {
  for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    args[_key2 - 3] = arguments[_key2];
  }

  var wrapped;
  return _regeneratorRuntime.async(function retryInterval$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        wrapped = function wrapped() {
          var res;
          return _regeneratorRuntime.async(function wrapped$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                res = undefined;
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(fn.apply(undefined, args));

              case 4:
                res = context$2$0.sent;
                context$2$0.next = 12;
                break;

              case 7:
                context$2$0.prev = 7;
                context$2$0.t0 = context$2$0['catch'](1);
                context$2$0.next = 11;
                return _regeneratorRuntime.awrap(sleep(sleepMs));

              case 11:
                throw context$2$0.t0;

              case 12:
                return context$2$0.abrupt('return', res);

              case 13:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[1, 7]]);
        };

        return context$1$0.abrupt('return', retry(times, wrapped));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function parallel(promises) {
  var done, results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, p;

  return _regeneratorRuntime.async(function parallel$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (promises instanceof Array) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Must parallelize a list of promises');

      case 2:
        if (!(promises.length < 1)) {
          context$1$0.next = 4;
          break;
        }

        throw new Error('List of promises was empty');

      case 4:
        done = _q2['default'].defer();
        results = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 9;
        _iterator = _getIterator(promises);

      case 11:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 19;
          break;
        }

        p = _step.value;

        if (!(!p.then || !p['catch'])) {
          context$1$0.next = 15;
          break;
        }

        throw new Error('Tried to parallelize a non-promise');

      case 15:
        p.then(function (res) {
          results.push(res);
          if (results.length === promises.length) {
            done.resolve(results);
          }
        }, function (err) {
          done.reject(err);
        });

      case 16:
        _iteratorNormalCompletion = true;
        context$1$0.next = 11;
        break;

      case 19:
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 25:
        context$1$0.prev = 25;
        context$1$0.prev = 26;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 28:
        context$1$0.prev = 28;

        if (!_didIteratorError) {
          context$1$0.next = 31;
          break;
        }

        throw _iteratorError;

      case 31:
        return context$1$0.finish(28);

      case 32:
        return context$1$0.finish(25);

      case 33:
        return context$1$0.abrupt('return', done.promise);

      case 34:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 21, 25, 33], [26,, 28, 32]]);
}

function nodeify(promisey, cb) {
  promisey.then(function (res) {
    cb(null, res);
  }, cb);
}

function nodeifyAll(promiseyMap) {
  var cbMap = {};
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    var _loop = function () {
      var _step2$value = _slicedToArray(_step2.value, 2);

      var name = _step2$value[0];
      var fn = _step2$value[1];

      /*jshint -W083 */
      cbMap[name] = function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var _cb = args.slice(-1)[0];
        args = args.slice(0, -1);
        nodeify(fn.apply(undefined, _toConsumableArray(args)), _cb);
      };
    };

    for (var _iterator2 = _getIterator((0, _es6Mapify.mapify)(promiseyMap)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return cbMap;
}

function asyncify(fn) {
  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  fn.call.apply(fn, [null].concat(args)).then(function () {}, function (err) {
    console.error(err.stack);
  });
}

exports.sleep = sleep;
exports.retry = retry;
exports.nodeify = nodeify;
exports.nodeifyAll = nodeifyAll;
exports.retryInterval = retryInterval;
exports.asyncify = asyncify;
exports.parallel = parallel;

/*jshint -W083 */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hc3luY2JveC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7aUJBRWMsR0FBRzs7Ozt5QkFDTSxZQUFZOztBQUhuQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFLeEMsU0FBZSxLQUFLLENBQUUsRUFBRTtNQUNsQixjQUFjOzs7O0FBQWQsc0JBQWMsR0FBRyxTQUFqQixjQUFjLENBQWEsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUNyQyxpQkFBTyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzNCOzs7eUNBQ1ksZUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7OztDQUMxQzs7QUFFRCxTQUFlLEtBQUssQ0FBRSxLQUFLLEVBQUUsRUFBRTtvQ0FBSyxJQUFJO0FBQUosUUFBSTs7O01BQ2xDLEtBQUssRUFDTCxJQUFJLEVBQ0osR0FBRzs7OztBQUZILGFBQUssR0FBRyxDQUFDO0FBQ1QsWUFBSSxHQUFHLEtBQUs7QUFDWixXQUFHLEdBQUcsSUFBSTs7O2NBQ1AsQ0FBQyxJQUFJLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQTs7Ozs7QUFDM0IsYUFBSyxFQUFFLENBQUM7Ozt5Q0FFTSxFQUFFLGtCQUFJLElBQUksQ0FBQzs7O0FBQXZCLFdBQUc7O0FBQ0gsWUFBSSxHQUFHLElBQUksQ0FBQzs7Ozs7Ozs7Y0FFUixLQUFLLElBQUksS0FBSyxDQUFBOzs7Ozs7Ozs7Ozs7NENBS2YsR0FBRzs7Ozs7OztDQUNYOztBQUVELFNBQWUsYUFBYSxDQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtxQ0FBSyxJQUFJO0FBQUosUUFBSTs7O01BQ25ELE9BQU87Ozs7OztBQUFQLGVBQU8sR0FBRyxTQUFWLE9BQU87Y0FDTCxHQUFHOzs7O0FBQUgsbUJBQUc7OztpREFFTyxFQUFFLGtCQUFJLElBQUksQ0FBQzs7O0FBQXZCLG1CQUFHOzs7Ozs7OztpREFFRyxLQUFLLENBQUMsT0FBTyxDQUFDOzs7Ozs7b0RBR2YsR0FBRzs7Ozs7OztTQUNYOzs0Q0FDTSxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQzs7Ozs7OztDQUM3Qjs7QUFFRCxTQUFlLFFBQVEsQ0FBRSxRQUFRO01BTzNCLElBQUksRUFDSixPQUFPLGtGQUNGLENBQUM7Ozs7O1lBUkosUUFBUSxZQUFZLEtBQUs7Ozs7O2NBQ3ZCLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDOzs7Y0FFcEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7Ozs7O2NBQ2YsSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUM7OztBQUUzQyxZQUFJLEdBQUcsZUFBRSxLQUFLLEVBQUU7QUFDaEIsZUFBTyxHQUFHLEVBQUU7Ozs7O2lDQUNGLFFBQVE7Ozs7Ozs7O0FBQWIsU0FBQzs7Y0FFSixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFNBQU0sQ0FBQTs7Ozs7Y0FDZixJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQzs7O0FBRXZELFNBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDcEIsaUJBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEIsY0FBSSxPQUFPLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDdEMsZ0JBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDdkI7U0FDRixFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQ2hCLGNBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEIsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NENBRUUsSUFBSSxDQUFDLE9BQU87Ozs7Ozs7Q0FDcEI7O0FBRUQsU0FBUyxPQUFPLENBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtBQUM5QixVQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRyxFQUFJO0FBQUUsTUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztHQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDOUM7O0FBRUQsU0FBUyxVQUFVLENBQUUsV0FBVyxFQUFFO0FBQ2hDLE1BQUksS0FBSyxHQUFHLEVBQUUsQ0FBQzs7Ozs7Ozs7O1VBQ0wsSUFBSTtVQUFFLEVBQUU7OztBQUVoQixXQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBbUI7MkNBQU4sSUFBSTtBQUFKLGNBQUk7OztBQUM3QixZQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUIsWUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsZUFBTyxDQUFDLEVBQUUscUNBQUksSUFBSSxFQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7T0FDM0IsQ0FBQzs7O0FBTkosdUNBQXVCLGVBekVoQixNQUFNLEVBeUVpQixXQUFXLENBQUMsaUhBQUU7O0tBTzNDOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0QsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFRCxTQUFTLFFBQVEsQ0FBRSxFQUFFLEVBQVc7cUNBQU4sSUFBSTtBQUFKLFFBQUk7OztBQUM1QixJQUFFLENBQUMsSUFBSSxNQUFBLENBQVAsRUFBRSxHQUFNLElBQUksU0FBSyxJQUFJLEVBQUMsQ0FBQyxJQUFJLENBQUMsWUFBTSxFQUFFLEVBQUUsVUFBQyxHQUFHLEVBQUs7QUFDN0MsV0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUIsQ0FBQyxDQUFDO0NBQ0o7O1FBRVEsS0FBSyxHQUFMLEtBQUs7UUFBRSxLQUFLLEdBQUwsS0FBSztRQUFFLE9BQU8sR0FBUCxPQUFPO1FBQUUsVUFBVSxHQUFWLFVBQVU7UUFBRSxhQUFhLEdBQWIsYUFBYTtRQUFFLFFBQVEsR0FBUixRQUFRO1FBQUUsUUFBUSxHQUFSLFFBQVEiLCJmaWxlIjoibGliL2FzeW5jYm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG5pbXBvcnQgUSBmcm9tICdxJztcbmltcG9ydCB7IG1hcGlmeSB9IGZyb20gJ2VzNi1tYXBpZnknO1xuXG5hc3luYyBmdW5jdGlvbiBzbGVlcCAobXMpIHtcbiAgbGV0IG5vZGVTZXRUaW1lb3V0ID0gZnVuY3Rpb24gKG1zLCBjYikge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGNiLCBtcyk7XG4gIH07XG4gIHJldHVybiBhd2FpdCBRLm5mY2FsbChub2RlU2V0VGltZW91dCwgbXMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXRyeSAodGltZXMsIGZuLCAuLi5hcmdzKSB7XG4gIGxldCB0cmllcyA9IDA7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIGxldCByZXMgPSBudWxsO1xuICB3aGlsZSAoIWRvbmUgJiYgdHJpZXMgPCB0aW1lcykge1xuICAgIHRyaWVzKys7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IGF3YWl0IGZuKC4uLmFyZ3MpO1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAodHJpZXMgPj0gdGltZXMpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXRyeUludGVydmFsICh0aW1lcywgc2xlZXBNcywgZm4sIC4uLmFyZ3MpIHtcbiAgbGV0IHdyYXBwZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gYXdhaXQgZm4oLi4uYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgc2xlZXAoc2xlZXBNcyk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuICByZXR1cm4gcmV0cnkodGltZXMsIHdyYXBwZWQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYXJhbGxlbCAocHJvbWlzZXMpIHtcbiAgaWYgKCEocHJvbWlzZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHBhcmFsbGVsaXplIGEgbGlzdCBvZiBwcm9taXNlc1wiKTtcbiAgfVxuICBpZiAocHJvbWlzZXMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3Qgb2YgcHJvbWlzZXMgd2FzIGVtcHR5XCIpO1xuICB9XG4gIGxldCBkb25lID0gUS5kZWZlcigpO1xuICBsZXQgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGxldCBwIG9mIHByb21pc2VzKSB7XG4gICAgLypqc2hpbnQgLVcwODMgKi9cbiAgICBpZiAoIXAudGhlbiB8fCAhcC5jYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJpZWQgdG8gcGFyYWxsZWxpemUgYSBub24tcHJvbWlzZVwiKTtcbiAgICB9XG4gICAgcC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHJlc3VsdHMucHVzaChyZXMpO1xuICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSBwcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgZG9uZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGRvbmUucmVqZWN0KGVycik7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbm9kZWlmeSAocHJvbWlzZXksIGNiKSB7XG4gIHByb21pc2V5LnRoZW4ocmVzID0+IHsgY2IobnVsbCwgcmVzKTsgfSwgY2IpO1xufVxuXG5mdW5jdGlvbiBub2RlaWZ5QWxsIChwcm9taXNleU1hcCkge1xuICBsZXQgY2JNYXAgPSB7fTtcbiAgZm9yIChsZXQgW25hbWUsIGZuXSBvZiBtYXBpZnkocHJvbWlzZXlNYXApKSB7XG4gICAgLypqc2hpbnQgLVcwODMgKi9cbiAgICBjYk1hcFtuYW1lXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICBsZXQgX2NiID0gYXJncy5zbGljZSgtMSlbMF07XG4gICAgICBhcmdzID0gYXJncy5zbGljZSgwLCAtMSk7XG4gICAgICBub2RlaWZ5KGZuKC4uLmFyZ3MpLCBfY2IpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGNiTWFwO1xufVxuXG5mdW5jdGlvbiBhc3luY2lmeSAoZm4sIC4uLmFyZ3MpIHtcbiAgZm4uY2FsbChudWxsLCAuLi5hcmdzKS50aGVuKCgpID0+IHt9LCAoZXJyKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgc2xlZXAsIHJldHJ5LCBub2RlaWZ5LCBub2RlaWZ5QWxsLCByZXRyeUludGVydmFsLCBhc3luY2lmeSwgcGFyYWxsZWwgfTtcbiJdfQ==