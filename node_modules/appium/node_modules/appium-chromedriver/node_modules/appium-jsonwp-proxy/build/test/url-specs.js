require('source-map-support').install();

/* global describe:true, it:true */

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

//import Q from 'q';

require('mochawait');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('proxying full urls', function () {
  it('should translate host and port', function () {
    var incomingUrl = 'http://127.0.0.2:4723/wd/hub/status';
    var j = new _.JWProxy();
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/status');
  });
  it('should translate the scheme', function () {
    var incomingUrl = 'http://127.0.0.2:4723/wd/hub/status';
    var j = new _.JWProxy({ scheme: 'HTTPS' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('https://localhost:4444/wd/hub/status');
  });
  it('should translate the base', function () {
    var incomingUrl = 'http://127.0.0.2:4723/wd/hub/status';
    var j = new _.JWProxy({ base: '' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/status');
  });
  it('should translate the session id', function () {
    var incomingUrl = 'http://127.0.0.2:4723/wd/hub/session/foobar/element';
    var j = new _.JWProxy({ sessionId: 'barbaz' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session/barbaz/element');
  });
  it('should error when translating session commands without session id', function () {
    var incomingUrl = 'http://127.0.0.2:4723/wd/hub/session/foobar/element';
    var j = new _.JWProxy();
    (function () {
      j.getUrlForProxy(incomingUrl);
    }).should['throw']('session id');
  });
});

describe('proxying partial urls', function () {
  it('should proxy /status', function () {
    var incomingUrl = '/status';
    var j = new _.JWProxy();
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/status');
  });
  it('should proxy /session', function () {
    var incomingUrl = '/session';
    var j = new _.JWProxy();
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session');
  });
  it('should proxy /sessions', function () {
    var incomingUrl = '/sessions';
    var j = new _.JWProxy();
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/sessions');
  });
  it('should proxy session commands based off /session', function () {
    var incomingUrl = '/session/foobar/element';
    var j = new _.JWProxy({ sessionId: 'barbaz' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session/barbaz/element');
  });
  it('should error session commands based off /session without session id', function () {
    var incomingUrl = '/session/foobar/element';
    var j = new _.JWProxy();
    (function () {
      j.getUrlForProxy(incomingUrl);
    }).should['throw']('session id');
  });
  it('should proxy session commands based off /wd/hub', function () {
    var incomingUrl = '/wd/hub/session/3d001db2-7987-42a7-975d-8d5d5304083f/timeouts/implicit_wait';
    var j = new _.JWProxy({ sessionId: '123' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session/123/timeouts/implicit_wait');
  });
  it('should proxy session commands based off /session as ""', function () {
    var incomingUrl = '';
    var j = new _.JWProxy();
    (function () {
      j.getUrlForProxy(incomingUrl);
    }).should['throw']('session id');
    j = new _.JWProxy({ sessionId: '123' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session/123');
  });
  it('should proxy session commands without /session', function () {
    var incomingUrl = '/element';
    var j = new _.JWProxy({ sessionId: 'barbaz' });
    var proxyUrl = j.getUrlForProxy(incomingUrl);
    proxyUrl.should.equal('http://localhost:4444/wd/hub/session/barbaz/element');
  });
  it('should error session commands without /session without session id', function () {
    var incomingUrl = '/element';
    var j = new _.JWProxy();
    (function () {
      j.getUrlForProxy(incomingUrl);
    }).should['throw']('session id');
  });
});
//# sourceMappingURL=data:application/json;base64,