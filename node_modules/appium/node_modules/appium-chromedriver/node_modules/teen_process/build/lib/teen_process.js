'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _child_process = require('child_process');

var _shellQuote = require('shell-quote');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _through = require('through');

var _through2 = _interopRequireDefault(_through);

var EventEmitter = _events2['default'].EventEmitter;

function exec(cmd) {
  var args = arguments[1] === undefined ? [] : arguments[1];
  var opts = arguments[2] === undefined ? {} : arguments[2];

  // get a quoted representation of the command for error strings
  var rep = _shellQuote.quote([cmd].concat(args));

  // extend default options; we're basically re-implementing exec's options
  // for use here with spawn under the hood
  opts = _Object$assign({
    timeout: null,
    encoding: 'utf8',
    killSignal: 'SIGTERM',
    cwd: undefined,
    env: process.env,
    ignoreOutput: false
  }, opts);

  // this is an async function, so return a promise
  return new _Promise(function (resolve, reject) {
    // spawn the child process with options; we don't currently expose any of
    // the other 'spawn' options through the API
    var proc = _child_process.spawn(cmd, args, { cwd: opts.cwd, env: opts.env });
    var stdout = '',
        stderr = '',
        timer = null;

    // if the process errors out, reject the promise
    proc.on('error', function (err) {
      reject(new Error('Command \'' + rep + '\' errored out: ' + err.stack));
    });

    // keep track of stdout/stderr if we haven't said not to
    if (!opts.ignoreOutput) {
      proc.stdout.on('data', function (data) {
        stdout += data;
      });
      proc.stderr.on('data', function (data) {
        stderr += data;
      });
    }

    // if the process ends, either resolve or reject the promise based on the
    // exit code of the process. either way, attach stdout, stderr, and code.
    // Also clean up the timer if it exists
    proc.on('close', function (code) {
      if (timer) {
        clearTimeout(timer);
      }
      stdout = stdout.toString(opts.encoding);
      stderr = stderr.toString(opts.encoding);
      if (code === 0) {
        resolve({ stdout: stdout, stderr: stderr, code: code });
      } else {
        var err = new Error('Command \'' + rep + '\' exited with code ' + code);
        err = _Object$assign(err, { stdout: stdout, stderr: stderr, code: code });
        reject(err);
      }
    });

    // if we set a timeout on the child process, cut into the execution and
    // reject if the timeout is reached. Attach the stdout/stderr we currently
    // have in case it's helpful in debugging
    if (opts.timeout) {
      timer = setTimeout(function () {
        stdout = stdout.toString(opts.encoding);
        stderr = stderr.toString(opts.encoding);
        var err = new Error('Command \'' + rep + '\' timed out after ' + opts.timeout + 'ms');
        err = _Object$assign(err, { stdout: stdout, stderr: stderr, code: null });
        reject(err);
        // reject and THEN kill to avoid race conditions with the handlers
        // above
        proc.kill(opts.killSignal);
      }, opts.timeout);
    }
  });
}

var SubProcess = (function (_EventEmitter) {
  function SubProcess(cmd) {
    var args = arguments[1] === undefined ? [] : arguments[1];

    _classCallCheck(this, SubProcess);

    _get(Object.getPrototypeOf(SubProcess.prototype), 'constructor', this).call(this);
    if (!cmd) throw new Error('Command is required');
    if (typeof cmd !== 'string') throw new Error('Command must be a string');
    if (!(args instanceof Array)) throw new Error('Args must be an array');
    this.cmd = cmd;
    this.args = args;
    this.proc = null;
  }

  _inherits(SubProcess, _EventEmitter);

  _createClass(SubProcess, [{
    key: 'start',
    value: function start() {
      var startDetector = arguments[0] === undefined ? null : arguments[0];
      var startDelay;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startDelay = 10;

            // the default start detector is that we get any output
            if (startDetector === null) {
              startDetector = function (stdout, stderr) {
                return stdout || stderr;
              };
            }

            // if the user passes a number, then we simply delay a certain amount of
            // time before returning control
            if (typeof startDetector === 'number') {
              startDelay = startDetector;
              startDetector = null;
            }

            return context$2$0.abrupt('return', new _Promise(function (resolve, reject) {
              try {
                _this.proc = _child_process.spawn(_this.cmd, _this.args);
              } catch (e) {
                reject(e);
              }
              _this.proc.stdout.setEncoding('utf8');
              _this.proc.stderr.setEncoding('utf8');
              _this.lastLinePortion = { stdout: '', stderr: '' };

              var handleOutput = function handleOutput(data) {
                try {
                  if (startDetector && startDetector(data.stdout, data.stderr)) {
                    resolve();
                  }
                } catch (e) {
                  reject(e);
                }
                _this.emit('output', data.stdout, data.stderr);
                var _arr = ['stdout', 'stderr'];
                for (var _i = 0; _i < _arr.length; _i++) {
                  var stream = _arr[_i];
                  if (!data[stream]) continue;
                  var lines = data[stream].split('\n');
                  if (lines.length > 1) {
                    var retLines = lines.slice(0, -1);
                    retLines[0] = _this.lastLinePortion[stream] + retLines[0];
                    _this.lastLinePortion[stream] = lines[lines.length - 1];
                    _this.emit('lines-' + stream, retLines);
                  } else {
                    _this.lastLinePortion[stream] += lines[0];
                  }
                }
              };

              _this.proc.on('error', function (err) {
                _this.proc.removeAllListeners('exit');
                _this.proc.kill('SIGINT');
                reject(err);
              });

              _this.proc.stdout.pipe(_through2['default'](function (stdout) {
                handleOutput({ stdout: stdout, stderr: '' });
              }));

              _this.proc.stderr.pipe(_through2['default'](function (stderr) {
                handleOutput({ stdout: '', stderr: stderr });
              }));

              _this.proc.on('exit', function (code, signal) {
                _this.handleLastLines();
                _this.emit('exit', code, signal);
                _this.proc = null;
              });

              if (!startDetector) {
                setTimeout(function () {
                  resolve();
                }, startDelay);
              }
            }));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'handleLastLines',
    value: function handleLastLines() {
      var _arr2 = ['stdout', 'stderr'];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var stream = _arr2[_i2];
        if (this.lastLinePortion[stream]) {
          this.emit('lines-' + stream, [this.lastLinePortion[stream]]);
          this.lastLinePortion[stream] = '';
        }
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      var signal = arguments[0] === undefined ? 'SIGTERM' : arguments[0];
      var timeout = arguments[1] === undefined ? 10000 : arguments[1];
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.proc) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Can\'t stop process; it\'s not currently running');

          case 2:
            this.handleLastLines();
            return context$2$0.abrupt('return', new _Promise(function (resolve, reject) {
              _this2.proc.on('close', resolve);
              _this2.proc.kill(signal);
              setTimeout(function () {
                reject(new Error('Process didn\'t end after ' + timeout + 'ms'));
              }, timeout);
            }));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return SubProcess;
})(EventEmitter);

exports.exec = exec;
exports.spawn = _child_process.spawn;
exports.SubProcess = SubProcess;
//# sourceMappingURL=data:application/json;base64,